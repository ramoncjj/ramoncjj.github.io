<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>j</title><link>https://ramoncjj.github.io/</link><description>Recent content on j</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 18 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ramoncjj.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>spring中的aop</title><link>https://ramoncjj.github.io/posts/spring%E4%B8%AD%E7%9A%84aop/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/spring%E4%B8%AD%E7%9A%84aop/</guid><description>什么是AOP Link to heading AOP是一种编程思想，基于面向对象编程（OOP）的一种补充。
AOP能干什么 Link to heading 想象下面的场景，开发中在多个模块间有某段重复的代码，我们通常是怎么处理的？显然，没有人会靠“复制粘贴”吧。在传统的面向过程编程中，我们也会将这段代码，抽象成一个方法，然后在需要的地方分别调用这个方法，这样当这段代码需要修改时，我们只需要改变这个方法就可以了。然而需求总是变化的，有一天，新增了一个需求，需要再多出做修改，我们需要再抽象出一个方法，然后再在需要的地方分别调用这个方法，又或者我们不需要这个方法了，我们还是得删除掉每一处调用该方法的地方。实际上涉及到多个地方具有相同的修改的问题我们都可以通过 AOP 来解决。
https://www.bilibili.com/video/BV1KT4y1G7hs/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=e74cb622d0f85ed446d8ae51bafe93b8</description></item><item><title>soa通俗解释</title><link>https://ramoncjj.github.io/posts/soa%E6%98%AF%E4%BB%80%E4%B9%88/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/soa%E6%98%AF%E4%BB%80%E4%B9%88/</guid><description> Link to heading SOA Link to heading 粗暴理解：把系统按照实际业务，拆分成刚刚好大小的、合适的、独立部署的模块，每个模块之间相互独立。
比如现我有一个数据库，一个JavaWeb（或者PHP等）的网站客户端，一个安卓app客户端，一个IOS客户端。现在我要从这个数据库中获取注册用户列表，如果不用SOA的设计思想，那么就会这样：JavaWeb里面写一个查询方法从数据库里面查数据然后在网页显示，安卓app里面写一个查询方法查询后在app上显示，IOS同样如此。这里就会出现查询方法重叠了，这样的坏处很明显了，三个地方都有相同的业务代码，要改三个地方都要改，而且要改的一模一样。当然问题不止这一个。
于是乎出现了这样的设计思想:
比如用Java（或者是其他语言皆可）单独创建一个工程部署在一台服务器上，并且写一个方法（或称函数）执行上述查询操作，然后使其他人可以通过某种途径（可以是http链接，或者是基于socket的RPC调用）访问这个方法得到返回数据，返回的数据类型是通用的json或者xml数据，就是说把这个操作封装到一个工程中去，然后暴露访问的方式，形成“服务”。比如这里就是注册用户服务，而关于注册用户的所有相关增删改查操作这个服务都会提供方法。这样一来，JavaWeb这边可以访问这个服务然后得到数据使用，安卓和IOS这里也可以通过这个服务得到数据。而且最重要的是，要修改关于注册用户的业务方法只要改这个服务就好了，很好的解耦。同理，其他业务比如商品、广告等业务都可以单独形成服务部署在单独服务器上。还有就是一旦哪天突然有一堆人要注册，假设这堆人仅仅只是注册而不做其他事情，其他业务比如商品、广告服务等都不忙，唯独注册这个功能压力很大，而原有的一台部署了注册服务的服务器已经承受不了这么高的并发，这时候就可以单独集群部署这个注册服务，提供多几台服务器提供注册服务，而其他服务还不忙，那就维持原样。当然，还有很多其他好处。
以上我所描述的就是基本的SOA思想了，按照业务功能将本来一整块的系统拆分为各个不同的子系统分别提供不同的服务，服务之间通过接口相互调用。这就是所谓的“面向服务的架构”。
后来又有了微服务的概念，个人理解微服务和SOA就是孪生子。如今生产实践中提到的微服务，在SOA的基础上更进一层，引入了很多新的东西如服务治理、链路跟踪、配置管理等等可以帮助企业构建高可用高并发高性能的系统的组件。什么是服务治理，就是当服务越来越多，调用方也越来越多的时候，它们之间的关系就变得非常混乱，需要对这些关系进行管理。举例，还是上面的例子:
假如我有一个商家服务，一开始有购物车服务和订单服务来使用这个服务，后来越来越多其他服务需要调用该商品服务，将近上百个调用方，这个时候作为服务方，它只知道提供服务，却不知道具体为谁提供了服务，并且这个商家服务不但是服务提供者角色，它自己也是服务调用者，比如它可能需要调用商品服务、用户服务器等等。而对于开发者来说，知道这N多调用方和N多服务方之间的关系是非常重要的。以Java开发为例，现在最流行的微服务框架如：Dubbo、SpringCloud，都有服务治理的功能，这样就能清晰地看到服务被谁谁谁调用，谁谁谁调用了哪些服务，哪些服务是热点服务需要配置服务器集群。此外，通过一些负载均衡组件如SpringCloud的Ribbon，服务集群的负载均衡也帮你搞定了，调用的时候只要指名服务名称，请求时会帮你完成负载均衡把请求打到集群中某台较空闲的服务器上，也是服务治理可以完成的重要功能之一。当然，还可以更进一步，加上服务监控跟踪等等等等之类的。实际上SOA只是一种架构设计模式，而SOAP、REST、RPC就是为了实践这种设计模式而设计的数据通讯方式，其中SOAP通俗理解就是服务间通过http+xml的形式完成数据交换，REST就是http+json的形式，RPC是基于socket的形式。CXF框架就是典型的SOAP/REST框架，Dubbo就是典型的RPC框架，而SpringCloud就是遵守REST规范的微服务生态系统。</description></item><item><title>spring中的ioc</title><link>https://ramoncjj.github.io/posts/spring%E4%B8%AD%E7%9A%84ioc/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/spring%E4%B8%AD%E7%9A%84ioc/</guid><description>什么是IOC Link to heading IOC是Inversion of Control的缩写，多数书籍翻译成&amp;quot;控制反转&amp;quot;或者”依赖注入“。
IO理论观点大体是这样：借助于“第三方”实现具有依赖关系的对象之间的解耦，见上图。
为什么会起”控制反转“这个名字 Link to heading 软件系统在没有引入IOC容器之前，如图所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。
软件系统在引入IOC容器之后，这种情形就完全改变了，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。
通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。</description></item><item><title>maven</title><link>https://ramoncjj.github.io/posts/maven/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/maven/</guid><description>Maven Link to heading 由于 Java 的生态非常丰富，无论你想实现什么功能，都能找到对应的工具类，这些工具类都是以 jar 包的形式出现的，例如 Spring，SpringMVC、MyBatis、数据库驱动，等等，都是以 jar 包的形式出现的，jar 包之间会有关联，在使用一个依赖之前，还需要确定这个依赖所依赖的其他依赖，所以，当项目比较大的时候，依赖管理会变得非常麻烦臃肿，这是 Maven 解决的第一个问题。
Maven 还可以处理多模块项目。简单的项目，单模块分包处理即可，如果项目比较复杂，要做成多模块项目，例如一个电商项目有订单模块、会员模块、商品模块、支付模块&amp;hellip;，一般来说，多模块项目，每一个模块无法独立运行，要多个模块合在一起，项目才可以运行，这个时候，借助 Maven 工具，可以实现项目的一键打包。
Maven 之前，我们更多的是使用 Ant 的项目构建工具，Ant 有一个特点，每次都得写，每次都写的差不多，配置也臃肿。所以，后来搞出来 Maven。Maven 就是最先进的版本构建工具吗？不是的，只不过，目前在 Java 领域 Maven 使用比较多。除了 Maven，还有 Gradle。
所以Maven 是一个项目管理工具，反映在配置中，就是一个 pom.xml 文件。
Maven仓库 Link to heading 本地仓库
路径为 user\ .m2\repository，项目使用一些插件或 jar 包优先从本地仓库查找
第三方仓库
一般由公司自己设立，只为本公司内部共享使用，它既可以作为公司内部构建协作和存档，也可作为公用类库镜像缓存
中央仓库
在 maven 软件中内置一个远程仓库地址 https://mvnrepository.com/ ，它是中央仓库，服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它含了世界上大部分流行的开源项目构件。</description></item><item><title>ruoyi-vue部署环境搭建</title><link>https://ramoncjj.github.io/posts/ruoyi-vue%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/ruoyi-vue%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>JDK Link to heading Java SE Development kit(JDK)，即java标准版开发包，是Oracle提供的一套用于开发java应用程序的开发包，它提供编译，运行java程序所需要的各种工具和资源，包括java编译器，java运行时环境，以及常用的java类库等。
JDK下载
配置环境变量
系统变量中添加
Variable Name : JAVA_HOME Variable Value : C:\Program Files\Java\jdk1.8.0_31
Variable Name : PATH Variable Value : %JAVA_HOME%\bin
查看配置是否成功
java -version MySql Link to heading 一个关系型数据库，主要用于存放持久化数据,将数据存储在硬盘中,读取速度较慢。
MySQL 下载 Navicat Link to heading 可视化数据库管理工具
Navicat 下载 Redis Link to heading 即NOSQL，一个非关系型数据库，缓存数据库，即将数据存储在缓存中，缓存的读取速度快，能够大大的提高运行效率，但是保存时间有限。</description></item><item><title>netstat</title><link>https://ramoncjj.github.io/posts/netstat/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/netstat/</guid><description>Netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。
列出所有端口情况
netstat -a # 列出所有端口 netstat -at # 列出所有TCP端口 netstat -au # 列出所有UDP端口 列出所有处于监听状态的 Sockets
netstat -l # 只显示监听端口 netstat -lt # 显示监听TCP端口 netstat -lu # 显示监听UDP端口 netstat -lx # 显示监听UNIX端口 显示每个协议的统计信息
netstat -s # 显示所有端口的统计信息 netstat -st # 显示所有TCP的统计信息 netstat -su # 显示所有UDP的统计信息 显示 PID 和进程名称
netstat -p 显示核心路由信息
netstat -r 查看端口和服务
netstat -antp | grep ssh</description></item><item><title>server</title><link>https://ramoncjj.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid><description/></item><item><title>前端中的一些简单概念</title><link>https://ramoncjj.github.io/posts/%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid><description>前端 Link to heading HTML
网页的结构，组件的位置 - 骨骼
CSS
网页的美化，组件的style - 服饰
JavaScript
网页的交互，组件的交互逻辑 - 逻辑
JavaScript Link to heading 你们人类不满足网页只是一些文字和图片的展示，希望页面上可以有更多功能。
比如点击一个按钮，弹一个窗口 或者改变页面上某些内容。 为了实现这种功能，就创造了一门脚本语言，逐步升级演化成了 JavaScript 这门语言。
JavaScript 框架 Link to heading jQuery
解决浏览器之间的兼容性问题
Vue
通过尽可能简单的API实现响应的数据绑定和组合的视图组件
AngularJS</description></item><item><title>线程和进程</title><link>https://ramoncjj.github.io/posts/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</guid><description>电脑构成 Link to heading 运行核心 cup + 寄存器 + RAM
外设 键盘 + 鼠标 + gps &amp;hellip;&amp;hellip;
基础知识点 Link to heading CPU太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，一句话就是在CPU看来就是轮流着来。
执行一段程序代码，实现一个功能，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，然后CPU开始执行。这里除了CPU以外所有的就构成了这个程序的执行环境，也就是我们所定义的程序上下文。
当这个程序执行完了，或者分配给他的CPU执行时间用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。
串联起来的事实：前面讲过在CPU看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：先加载程序A的上下文，然后开始执行A，保存程序A的上下文，调入下一个要执行的程序B的程序上下文，然后开始执行B,保存程序B的上下文
进程 Link to heading CPU加载上下文时间 + CPU执行时间 + CPU保存上下文时间
线程 Link to heading 进程的颗粒度太大，每次都要有上下的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成:</description></item><item><title>shell和Path</title><link>https://ramoncjj.github.io/posts/shellandpath/</link><pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/shellandpath/</guid><description>shell Link to heading shell本身是一个程序， 它为我们使用程序提供了一个界面，shell一般分两种:
命令行shell（CLI）
图形用户界面（GUI）
shell 使用很多种语言来对内核进行操作
bash，zsh，sh，&amp;hellip;
每个指令也都是可执行程序，指令后半段都是参数，用来对应不同的对内核操作
PATH Link to heading PATH是一个表格，存放了很多路径 ，在这些路径下存放了可执行程序
当你在终端里输入指令时，系统会去这些路径下搜索同名的可执行程序</description></item><item><title>hugo + github 搭建个人博客</title><link>https://ramoncjj.github.io/posts/hugo/</link><pubDate>Fri, 26 Aug 2022 00:00:00 +0000</pubDate><guid>https://ramoncjj.github.io/posts/hugo/</guid><description>该搭建流程概述如上图
本地 hugo Link to heading 下载 https://github.com/gohugoio/hugo/releases
配置 解压之后能看到hugo.exe文件，将其的绝对路径添加到path后，我们便可全局使用hugo命令
使用 @ECHO OFF hugo new site demo #创建博客项目demo cd demo cd themes #进入themes文件夹 # 下载主题，这里选择hugo-coder，主题下载到themes文件夹里 git clone https://github.com/luizdepra/hugo-coder.git #将hugo-coder/exampleSite下的config.toml文件复制并且替换democonfog.toml cd hugo-coder cd exampleSite move config.toml ../ cd .. move config.toml ../ cd .. move config.toml ../ cd .. # 回到demo路径下，开启本地预览 hugo server PAUSE # 复制代码保存为bat文件，双击执行 本地预览 http://localhost:1313/</description></item></channel></rss>